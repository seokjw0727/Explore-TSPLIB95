# .github/workflows/build-tsplib.yml
name: Build TSPLIB JSON
on:
  workflow_dispatch: {}
  schedule:
    - cron: "17 2 * * *"
jobs:
  build:
    runs-on: ubuntu-latest
    permissions: { contents: write }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: |
          python -m pip install --upgrade pip
          pip install requests tsplib95
      - name: Build tsplib.json (inline)
        shell: bash
        run: |
          python - << 'PY'
          import os, json, gzip, io, re, sys, time, socket
          from pathlib import Path
          from urllib.parse import urljoin
          import requests
          from requests.adapters import HTTPAdapter
          from urllib3.util.retry import Retry
          import tsplib95

          BASE_DIR = Path(__file__).resolve().parents[2]  # repo root
          # Pages 소스가 docs/면 "docs/data"로 바꾸세요
          DATA_DIR = BASE_DIR / "data"
          DATA_DIR.mkdir(parents=True, exist_ok=True)
          OUT = DATA_DIR / "tsplib.json"

          TSPLIB_BASE = "http://comopt.ifi.uni-heidelberg.de/software/TSPLIB95/"
          TSP_DIR = urljoin(TSPLIB_BASE, "tsp/")

          def make_session():
            s = requests.Session()
            s.headers.update({"User-Agent": "tsplib95-crawler/1.1"})
            retry = Retry(total=5, connect=5, read=5, backoff_factor=0.6,
                          status_forcelist=[429,500,502,503,504],
                          allowed_methods={"GET","HEAD"}, raise_on_status=False)
            s.mount("https://", HTTPAdapter(max_retries=retry))
            s.mount("http://", HTTPAdapter(max_retries=retry))
            return s
          session = make_session()

          def list_tsp_gz():
            r = session.get(TSP_DIR, timeout=30); r.raise_for_status()
            return sorted(set(re.findall(r'href="([A-Za-z0-9_.-]+\\.tsp\\.gz)"', r.text)))

          def url_exists(url: str) -> bool:
            try:
              r = session.get(url, timeout=20, stream=True)
              return r.status_code == 200
            except requests.RequestException:
              return False

          def has_opt_tour(base: str) -> bool:
            return url_exists(urljoin(TSP_DIR, f"{base}.opt.tour.gz"))

          def fetch(url: str) -> bytes:
            r = session.get(url, timeout=60); r.raise_for_status()
            return r.content

          def parse_tsp_gz(buf: bytes):
            with gzip.GzipFile(fileobj=io.BytesIO(buf)) as f:
              raw = f.read().decode("utf-8", errors="replace")
            prob = tsplib95.parse(raw)
            name = getattr(prob, "name", "") or ""
            return {
              "name": name,
              "type": getattr(prob, "type", "") or "",
              "dimension": int(getattr(prob, "dimension", 0) or 0),
              "edge_weight_type": getattr(prob, "edge_weight_type", "") or "",
              "edge_weight_format": getattr(prob, "edge_weight_format", "") or "",
              "symmetric": (getattr(prob, "type", "") == "TSP") and (getattr(prob, "edge_weight_format", "") != "FULL_MATRIX"),
            }

          # DNS 체크
          try:
            socket.gethostbyname("comopt.ifi.uni-heidelberg.de")
          except Exception as e:
            print(f"[fatal] DNS 실패: {e}", file=sys.stderr); sys.exit(2)

          items = []
          try:
            tsp_files = list_tsp_gz()
          except Exception as e:
            print(f"[fatal] 디렉터리 목록 실패: {e}", file=sys.stderr); sys.exit(2)

          for fname in tsp_files:
            base = fname[:-7]
            tsp_url_gz = urljoin(TSP_DIR, fname)
            try:
              buf = fetch(tsp_url_gz)
              meta = parse_tsp_gz(buf)
              if not meta.get("dimension"):
                continue
              meta.update({
                "has_opt_tour": has_opt_tour(base),
                "files": {
                  "tsp_gz": f"{TSP_DIR}{base}.tsp.gz",
                  "opt_tour_gz": f"{TSP_DIR}{base}.opt.tour.gz",
                },
              })
              items.append(meta)
            except Exception as e:
              print(f"[warn] skip {fname}: {e}", file=sys.stderr)
              continue
            time.sleep(0.05)

          items.sort(key=lambda d: (str(d.get("name")).lower(), d.get("dimension") or 0))
          OUT.write_text(json.dumps(items, indent=2, ensure_ascii=False))
          print(f"[ok] wrote {OUT} ({len(items)} items)")
          PY
      - name: Commit & Push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/tsplib.json docs/data/tsplib.json || true
          if git diff --cached --quiet; then echo "No changes."; else git commit -m "build: update TSPLIB JSON"; git push; fi
